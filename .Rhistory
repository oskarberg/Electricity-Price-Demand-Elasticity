theme_minimal() +
scale_color_manual(values = c("Y" = "red", "N" = "blue"))
# Assuming 'holiday' is a variable with 'Y' and 'N' values in your Elec_data dataframe
ggplot(Elec_data, aes(x = log_demand_offset, y = log_RRP_offset, color = school_day)) +
geom_point(alpha = 0.5) +
labs(title = "Demand vs. Price (Separated by school_day)",
x = "Price (RRP)",
y = "Demand",
color = "school_day") +
theme_minimal() +
scale_color_manual(values = c("Y" = "red", "N" = "blue"))
# Assuming 'holiday' is a variable with 'Y' and 'N' values in your Elec_data dataframe
ggplot(Elec_data, aes(x = log_demand_offset, y = log_RRP_offset, color = holiday)) +
geom_point(alpha = 0.5) +
labs(title = "Demand vs. Price (Separated by school_day)",
x = "Price (RRP)",
y = "Demand",
color = "holiday") +
theme_minimal() +
scale_color_manual(values = c("Y" = "red", "N" = "blue"))
ggplot(Elec_data, aes(x = log(max_temperature), y = log_demand_offset)) +
geom_point() +
labs(title = "Demand vs. Max Temperature", x = "Max Temperature", y = "Demand")
# Assuming your breakpoint is around 3.035 (the midpoint of 3.03 and 3.04)
breakpoint <- 3.035
# Create an indicator variable
Elec_data$segment <- ifelse(log(Elec_data$max_temperature) <= breakpoint, "below_break", "above_break")
# Fit separate linear models for each segment
lm_below <- lm(log_demand_offset ~ log(max_temperature), data = Elec_data, subset = (segment == "below_break"))
lm_above <- lm(log_demand_offset ~ log(max_temperature), data = Elec_data, subset = (segment == "above_break"))
# Summary of the models
summary(lm_below)
summary(lm_above)
ggplot(Elec_data, aes(x = log(max_temperature), y = log_demand_offset)) +
geom_point() +
geom_abline(intercept = coef(lm_below)["(Intercept)"],
slope = coef(lm_below)["log(max_temperature)"],
linetype = "dashed", color = "blue") +
geom_abline(intercept = coef(lm_above)["(Intercept)"],
slope = coef(lm_above)["log(max_temperature)"],
linetype = "dashed", color = "red") +
labs(title = "Demand vs. Max Temperature (Piecewise Linear)",
x = "Log(Max Temperature)",
y = "Log(Demand)") +
theme_minimal()
# Base plot
p <- ggplot(Elec_data, aes(x = log(max_temperature), y = log_demand_offset)) +
geom_point() +
labs(title = "Demand vs. Max Temperature", x = "Max Temperature", y = "Demand")
# Adding vertical lines for potential breakpoints
p + geom_vline(xintercept = 3.03, color = "red", linetype = "dashed") +
geom_vline(xintercept = 3.04, color = "red", linetype = "dashed")
# Base plot
p <- ggplot(Elec_data, aes(x = log(max_temperature), y = log_demand_offset)) +
geom_point() +
labs(title = "Demand vs. Max Temperature", x = "Max Temperature", y = "Demand")
# Adding vertical lines for potential breakpoints
p + geom_vline(xintercept = 3.035, color = "red", linetype = "dashed")
# Base plot
p <- ggplot(Elec_data, aes(x = log(max_temperature), y = log_demand_offset)) +
geom_point() +
labs(title = "Demand vs. Max Temperature", x = "Max Temperature", y = "Demand")
# Adding vertical lines for potential breakpoints
p + geom_vline(xintercept = 3.04, color = "red", linetype = "dashed")
# Base plot
p <- ggplot(Elec_data, aes(x = log(max_temperature), y = log_demand_offset)) +
geom_point() +
labs(title = "Demand vs. Max Temperature", x = "Max Temperature", y = "Demand")
# Adding vertical lines for potential breakpoints
p + geom_vline(xintercept = 3.041, color = "red", linetype = "dashed")
# Assuming your breakpoint is around 3.035 (the midpoint of 3.03 and 3.04)
breakpoint <- 3.041
# Create an indicator variable
Elec_data$segment <- ifelse(log(Elec_data$max_temperature) <= breakpoint, "below_break", "above_break")
# Fit separate linear models for each segment
lm_below <- lm(log_demand_offset ~ log(max_temperature), data = Elec_data, subset = (segment == "below_break"))
lm_above <- lm(log_demand_offset ~ log(max_temperature), data = Elec_data, subset = (segment == "above_break"))
# Summary of the models
summary(lm_below)
summary(lm_above)
ggplot(Elec_data, aes(x = log(max_temperature), y = log_demand_offset)) +
geom_point() +
geom_abline(intercept = coef(lm_below)["(Intercept)"],
slope = coef(lm_below)["log(max_temperature)"],
linetype = "dashed", color = "blue") +
geom_abline(intercept = coef(lm_above)["(Intercept)"],
slope = coef(lm_above)["log(max_temperature)"],
linetype = "dashed", color = "red") +
labs(title = "Demand vs. Max Temperature (Piecewise Linear)",
x = "Log(Max Temperature)",
y = "Log(Demand)") +
theme_minimal()
# Base plot
p <- ggplot(Elec_data, aes(x = log(min_temperature), y = log_demand_offset)) +
geom_point() +
labs(title = "Demand vs. Max Temperature", x = "Max Temperature", y = "Demand")
# Adding vertical lines for potential breakpoints
p + geom_vline(xintercept = 3.041, color = "red", linetype = "dashed")
# Base plot
p <- ggplot(Elec_data, aes(x = log(max_temperature), y = log_demand_offset)) +
geom_point() +
labs(title = "Demand vs. Max Temperature", x = "Max Temperature", y = "Demand")
# Adding vertical lines for potential breakpoints
p + geom_vline(xintercept = 3.041, color = "red", linetype = "dashed")
# Assuming your breakpoint is around 3.035 (the midpoint of 3.03 and 3.04)
breakpoint <- 3.041
# Create an indicator variable
Elec_data$segment <- ifelse(log(Elec_data$max_temperature) <= breakpoint, "below_break", "above_break")
# Fit separate linear models for each segment
lm_below <- lm(log_demand_offset ~ log(max_temperature), data = Elec_data, subset = (segment == "below_break"))
lm_above <- lm(log_demand_offset ~ log(max_temperature), data = Elec_data, subset = (segment == "above_break"))
# Summary of the models
summary(lm_below)
summary(lm_above)
ggplot(Elec_data, aes(x = log(max_temperature), y = log_demand_offset)) +
geom_point() +
geom_abline(intercept = coef(lm_below)["(Intercept)"],
slope = coef(lm_below)["log(max_temperature)"],
linetype = "dashed", color = "blue") +
geom_abline(intercept = coef(lm_above)["(Intercept)"],
slope = coef(lm_above)["log(max_temperature)"],
linetype = "dashed", color = "red") +
labs(title = "Demand vs. Max Temperature (Piecewise Linear)",
x = "Log(Max Temperature)",
y = "Log(Demand)") +
theme_minimal()
# Base plot
p <- ggplot(Elec_data, aes(x = abs(log(max_temperature) - breakpoint), y = log_demand_offset)) +
geom_point() +
labs(title = "Demand vs. Max Temperature", x = "Max Temperature", y = "Demand")
# Adding vertical lines for potential breakpoints
p + geom_vline(xintercept = 3.041, color = "red", linetype = "dashed")
# Base plot
p <- ggplot(Elec_data, aes(x = abs(log(max_temperature) - breakpoint), y = log_demand_offset)) +
geom_point() +
labs(title = "Demand vs. Max Temperature", x = "Max Temperature", y = "Demand")
# Base plot
p <- ggplot(Elec_data, aes(x = abs(log(max_temperature) - breakpoint), y = log_demand_offset)) +
geom_point() +
labs(title = "Demand vs. Max Temperature", x = "Max Temperature", y = "Demand")
# Base plot
ggplot(Elec_data, aes(x = abs(log(max_temperature) - breakpoint), y = log_demand_offset)) +
geom_point() +
labs(title = "Demand vs. Max Temperature", x = "Max Temperature", y = "Demand")
breakpoint <- 3.041
# Calculate the absolute difference from the breakpoint
Elec_data$abs_diff_from_breakpoint <- abs(log(Elec_data$max_temperature) - breakpoint)
# Stan model file
stan_file <- "elec_model.stan"
# Add the new variable to the data list
stan_data <- list(
N = nrow(Elec_data),
log_demand = Elec_data$log_demand_offset,
log_price = Elec_data$log_RRP_offset,
abs_diff = Elec_data$abs_diff_from_breakpoint
)
# Fit the model with the updated data
fit <- stan(file = stan_file, data = stan_data, iter = 2000, chains = 4)
# Extract and analyze results
print(fit)
# Assuming 'fit' is your fitted model object
samples <- extract(fit)
# Calculating mean estimates for alpha and beta
mean_alpha <- apply(samples$alpha, 2, mean)
mean_beta <- apply(samples$beta, 2, mean)
# Create a data frame for plotting
time_points <- 1:length(mean_alpha)  # Replace with actual time points if available
alpha_beta_df <- data.frame(Time = time_points,
Mean_Alpha = mean_alpha,
Mean_Beta = mean_beta)
# Plotting Mean Alpha
ggplot(alpha_beta_df, aes(x = Time, y = Mean_Alpha)) +
geom_line() +
labs(title = "Mean Alpha Over Time", x = "Time", y = "Mean Alpha")
# Plotting Mean Beta
ggplot(alpha_beta_df, aes(x = Time, y = Mean_Beta)) +
geom_line(color = "blue") +
labs(title = "Mean Beta Over Time", x = "Time", y = "Mean Beta")
gamma_samples <- samples$gamma
gamma_samples
mean_gamma <- mean(gamma_samples)
sd_gamma <- sd(gamma_samples)
print(c(mean = mean_gamma, sd = sd_gamma))
# Plotting RRP vs Demand
ggplot(Elec_data, aes(x = date, y = log_RRP_offset)) +
geom_point(alpha = 0.5) +
labs(title = "RRP vs Demand", x = "Demand", y = "RRP") +
theme_minimal()
# Plotting RRP vs Demand
ggplot(Elec_data, aes(x = date, y = Elec_data$demand)) +
geom_point(alpha = 0.5) +
labs(title = "RRP vs Demand", x = "Demand", y = "RRP") +
theme_minimal()
demand_ts <- ts(demand, frequency = 365)  # 365 for daily data in a year
# Assuming 'demand' is your electricity demand data and it's in a regular time series format
# For example, if your data is daily:
demand_ts <- ts(Elec_data$demand, frequency = 365)  # 365 for daily data in a year
acf(demand_ts, main = "ACF of Electricity Demand")
# Plotting RRP vs Demand
ggplot(Elec_data, aes(x = date, y = log(Elec_data$demand))) +
geom_point(alpha = 0.5) +
labs(title = "RRP vs Demand", x = "Demand", y = "RRP") +
theme_minimal()
# Plotting RRP vs Demand
ggplot(Elec_data, aes(x = date, y = log_demand_offset)) +
geom_point(alpha = 0.5) +
labs(title = "RRP vs Demand", x = "Demand", y = "RRP") +
theme_minimal()
# Assuming 'demand' is your electricity demand data and it's in a regular time series format
# For example, if your data is daily:
demand_ts <- ts(Elec_data$log_demand_offset, frequency = 365)  # 365 for daily data in a year
acf(demand_ts, main = "ACF of Electricity Demand")
acf(demand_ts, main = "ACF of Electricity Demand", lags = 365)
acf(demand_ts, main = "ACF of Electricity Demand", lag = 365)
acf(demand_ts, main = "ACF of Electricity Demand", lag = 730)
acf(demand_ts, main = "ACF of Electricity Demand", lag = 365)
library(forecast)
# Assuming 'demand_ts' is your time series object
fit <- auto.arima(demand_ts, seasonal = TRUE, D = 1, period = 7)
# Convert 'demand' data to a 'ts' object with a weekly frequency
demand_ts <- ts(Elec_data$log_demand_offset, frequency = 7)
fit <- auto.arima(demand_ts, seasonal = TRUE)
# Extract residuals from the fitted model
residuals <- residuals(fit)
# Time plot of residuals
plot(residuals, main = "Time Plot of Residuals", ylab = "Residuals")
abline(h = 0, col = "red")
# Plotting RRP vs Demand
ggplot(Elec_data, aes(x = date, y = log_RRP_offset)) +
geom_point(alpha = 0.5) +
labs(title = "RRP vs Demand", x = "Demand", y = "RRP") +
theme_minimal()
library(ggplot2)
ggplot(comparison_df, aes(x = Log_RRP_Offset, y = Residuals)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, col = "blue") +
labs(title = "Scatter Plot of Residuals vs Log RRP Offset", x = "Log RRP Offset", y = "Residuals")
comparison_df <- data.frame(
Date = time(demand_ts),  # Assuming the time series has a Date attribute
Residuals = residuals,
Log_RRP_Offset = Elec_data$log_RRP_offset
)
library(ggplot2)
ggplot(comparison_df, aes(x = Log_RRP_Offset, y = Residuals)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, col = "blue") +
labs(title = "Scatter Plot of Residuals vs Log RRP Offset", x = "Log RRP Offset", y = "Residuals")
ggplot(comparison_df, aes(x = Date)) +
geom_line(aes(y = Residuals, col = "Residuals")) +
geom_line(aes(y = Log_RRP_Offset, col = "Log RRP Offset")) +
labs(title = "Time Series Plot of Residuals and Log RRP Offset", x = "Date", y = "") +
scale_color_manual(values = c("Residuals" = "red", "Log RRP Offset" = "blue"))
ggplot(comparison_df, aes(x = Date)) +
geom_line(aes(y = Residuals*3, col = "Residuals")) +
geom_line(aes(y = Log_RRP_Offset, col = "Log RRP Offset")) +
labs(title = "Time Series Plot of Residuals and Log RRP Offset", x = "Date", y = "") +
scale_color_manual(values = c("Residuals" = "red", "Log RRP Offset" = "blue"))
ggplot(comparison_df, aes(x = Date)) +
geom_line(aes(y = Residuals*5, col = "Residuals")) +
geom_line(aes(y = Log_RRP_Offset, col = "Log RRP Offset")) +
labs(title = "Time Series Plot of Residuals and Log RRP Offset", x = "Date", y = "") +
scale_color_manual(values = c("Residuals" = "red", "Log RRP Offset" = "blue"))
acf(residuals, main = "ACF of Electricity Demand", lag = 365)
acf(residuals, main = "ACF of Electricity Demand", lag = 50)
acf(residuals, main = "ACF of Electricity Demand", lag = 150)
price_ts <- ts(Elec_data$log_RRP_offset, frequency = 356)
acf(price_ts, main = "ACF of Electricity Demand", lag = 150)
price_ts <- ts(Elec_data$log_RRP_offset, frequency = 356)
acf(price_ts, main = "ACF of Electricity Demand", lag = 28)
# Plotting RRP vs Demand
ggplot(Elec_data, aes(x = date, y = max_temperature)) +
geom_point(alpha = 0.5) +
labs(title = "RRP vs Demand", x = "Demand", y = "RRP") +
theme_minimal()
ggplot(Elec_data, aes(x = date, y = log(max_temperature))) +
geom_point(alpha = 0.5) +
labs(title = "RRP vs Demand", x = "Demand", y = "RRP") +
theme_minimal()
# Plotting RRP vs Demand
ggplot(Elec_data, aes(x = date, y = log_demand_offset)) +
geom_point(alpha = 0.5) +
labs(title = "RRP vs Demand", x = "Demand", y = "RRP") +
theme_minimal()
# Plotting RRP vs Demand
ggplot(Elec_data, aes(x = date, y = log(min_temperature))) +
geom_point(alpha = 0.5) +
labs(title = "RRP vs Demand", x = "Demand", y = "RRP") +
theme_minimal()
# Create a base plot with the date on the x-axis
base_plot <- ggplot(Elec_data, aes(x = date)) + theme_minimal()
# Add the first layer for log_demand_offset
demand_plot <- base_plot +
geom_point(aes(y = log_demand_offset), alpha = 0.5, color = "blue") +
labs(title = "RRP vs Demand and Temperature", y = "Logged Values")
# Add the second layer for log(min_temperature)
combined_plot <- demand_plot +
geom_point(aes(y = log(min_temperature)), alpha = 0.5, color = "red")
# Display the combined plot
print(combined_plot)
# Create a base plot with the date on the x-axis
base_plot <- ggplot(Elec_data, aes(x = date)) + theme_minimal()
# Add the first layer for log_demand_offset
demand_plot <- base_plot +
geom_point(aes(y = log_demand_offset), alpha = 0.5, color = "blue") +
labs(title = "RRP vs Demand and Temperature", y = "Logged Values")
# Add the second layer for log(min_temperature)
combined_plot <- demand_plot +
geom_point(aes(y = log(min_temperature))+9, alpha = 0.5, color = "red")
# Standardizing the variables
Elec_data <- Elec_data %>%
mutate(
standardized_log_demand = (log_demand_offset - mean(log_demand_offset)) / sd(log_demand_offset),
standardized_log_temp = (log(min_temperature) - mean(log(min_temperature))) / sd(log(min_temperature))
)
# Create a base plot with the date on the x-axis
base_plot <- ggplot(Elec_data, aes(x = date)) + theme_minimal()
# Add the first layer for standardized log_demand_offset
demand_plot <- base_plot +
geom_point(aes(y = standardized_log_demand), alpha = 0.5, color = "blue") +
labs(title = "Standardized RRP vs Demand and Temperature", y = "Standardized Logged Values")
# Add the second layer for standardized log(min_temperature)
combined_plot <- demand_plot +
geom_point(aes(y = standardized_log_temp), alpha = 0.5, color = "red")
# Display the combined plot
print(combined_plot)
# Standardizing the variables
Elec_data <- Elec_data %>%
mutate(
standardized_log_demand = (log_demand_offset - mean(log_demand_offset)) / sd(log_demand_offset),
standardized_log_temp = (log(max_temperature) - mean(log(max_temperature))) / sd(log(max_temperature))
)
# Create a base plot with the date on the x-axis
base_plot <- ggplot(Elec_data, aes(x = date)) + theme_minimal()
# Add the first layer for standardized log_demand_offset
demand_plot <- base_plot +
geom_point(aes(y = standardized_log_demand), alpha = 0.5, color = "blue") +
labs(title = "Standardized RRP vs Demand and Temperature", y = "Standardized Logged Values")
# Add the second layer for standardized log(min_temperature)
combined_plot <- demand_plot +
geom_point(aes(y = standardized_log_temp), alpha = 0.5, color = "red")
# Display the combined plot
print(combined_plot)
# Invert one of the standardized variables for comparison
Elec_data <- Elec_data %>%
mutate(
inverted_standardized_log_temp = -1 * standardized_log_temp
)
# Create a combined plot
ggplot(Elec_data, aes(x = date)) +
geom_line(aes(y = standardized_log_demand), color = "blue", alpha = 0.7) +
geom_line(aes(y = inverted_standardized_log_temp), color = "red", alpha = 0.7) +
labs(title = "Comparison of Standardized Demand and Inverted Temperature",
x = "Date", y = "Standardized / Inverted Values") +
theme_minimal()
# Assuming log_demand_offset is the variable of interest
demand_ts <- ts(Elec_data$log_demand_offset, frequency = 365)  # Adjust frequency as needed
# Perform STL decomposition
decomp <- stl(demand_ts, s.window = "periodic")
plot(decomp)
price_ts <- ts(Elec_data$log_RRP_offset, frequency = 365)  # Adjust frequency as needed
price_stl <- stl(price_ts, s.window = "periodic")
plot(price_stl)
# Convert to time series format
demand_ts <- ts(Elec_data$log_demand_offset, frequency = 365)  # Adjust frequency based on data
price_ts <- ts(Elec_data$log_RRP_offset, frequency = 365)      # Adjust frequency based on data
# Perform STL decomposition
demand_stl <- stl(demand_ts, s.window = "periodic")
price_stl <- stl(price_ts, s.window = "periodic")
# Extract seasonal components
Elec_data$seasonal_demand <- demand_stl$time.series[, "seasonal"]
Elec_data$seasonal_price <- price_stl$time.series[, "seasonal"]
# Adjust data by removing seasonal components
Elec_data$adjusted_demand <- Elec_data$log_demand_offset - Elec_data$seasonal_demand
Elec_data$adjusted_price <- Elec_data$log_RRP_offset - Elec_data$seasonal_price
# Standardizing the adjusted demand and price
Elec_data$standardized_adjusted_demand <- scale(Elec_data$adjusted_demand)
Elec_data$standardized_adjusted_price <- scale(Elec_data$adjusted_price)
ggplot(Elec_data, aes(x = date)) +
geom_line(aes(y = standardized_adjusted_demand, colour = "Adjusted Demand")) +
geom_line(aes(y = standardized_adjusted_price, colour = "Adjusted Price")) +
scale_colour_manual(values = c("Adjusted Demand" = "blue", "Adjusted Price" = "red")) +
labs(title = "Standardized Adjusted Demand and Price Over Time",
x = "Date", y = "Standardized Values", colour = "Legend") +
theme_minimal()
# Convert to time series format
demand_ts <- ts(Elec_data$log_demand_offset, frequency = 365)  # Adjust frequency based on data
price_ts <- ts(Elec_data$log_RRP_offset, frequency = 365)      # Adjust frequency based on data
# Perform STL decomposition
demand_stl <- stl(demand_ts, s.window = "periodic")
price_stl <- stl(price_ts, s.window = "periodic")
# Extract seasonal components
Elec_data$seasonal_demand <- demand_stl$time.series[, "seasonal"]
Elec_data$seasonal_price <-  price_stl$time.series[, "seasonal"]
# Adjust data by removing seasonal components
Elec_data$adjusted_demand <- Elec_data$log_demand_offset - Elec_data$seasonal_demand
Elec_data$adjusted_price <- Elec_data$log_RRP_offset #- Elec_data$seasonal_price
# Standardizing the adjusted demand and price
Elec_data$standardized_adjusted_demand <- scale(Elec_data$adjusted_demand)
Elec_data$standardized_adjusted_price <- scale(Elec_data$adjusted_price)
ggplot(Elec_data, aes(x = date)) +
geom_line(aes(y = standardized_adjusted_demand, colour = "Adjusted Demand")) +
geom_line(aes(y = standardized_adjusted_price, colour = "Adjusted Price")) +
scale_colour_manual(values = c("Adjusted Demand" = "blue", "Adjusted Price" = "red")) +
labs(title = "Standardized Adjusted Demand and Price Over Time",
x = "Date", y = "Standardized Values", colour = "Legend") +
theme_minimal()
# Plotting RRP vs Demand
ggplot(Elec_data, aes(x = log(max_temperature), y = standardized_adjusted_demand)) +
geom_point(alpha = 0.5) +
labs(title = "RRP vs Demand", x = "Demand", y = "RRP") +
theme_minimal()
# Plotting RRP vs Demand
ggplot(Elec_data, aes(x = standardized_adjusted_price, y = standardized_adjusted_demand)) +
geom_point(alpha = 0.5) +
labs(title = "RRP vs Demand", x = "Demand", y = "RRP") +
theme_minimal()
# Plotting RRP vs Demand
ggplot(Elec_data, aes(x = standardized_adjusted_demand, y = standardized_adjusted_price)) +
geom_point(alpha = 0.5) +
labs(title = "RRP vs Demand", x = "Demand", y = "RRP") +
theme_minimal()
# Load necessary libraries
library(tidyverse)  # For data manipulation
library(rstan)      # For Bayesian inference
library(forecast)   # For time series analysis
# Read the data into a data frame
Elec_data <- read.csv("complete_dataset.csv")
# Ensure that 'date' is in date format
Elec_data$date <- as.Date(Elec_data$date)
# Offset for log transformation
min_RRP <- min(Elec_data$RRP)
offset_value <- abs(min_RRP) + 0.1
Elec_data$log_demand_offset <- log(Elec_data$demand + offset_value)
Elec_data$log_RRP_offset <- log(Elec_data$RRP + offset_value)
# Adding temperature difference from breakpoint
breakpoint <- 3.041
Elec_data$abs_diff_from_breakpoint <- abs(log(Elec_data$max_temperature) - breakpoint)
# Combined plot of Demand and Temperature
base_plot <- ggplot(Elec_data, aes(x = date)) + theme_minimal()
demand_plot <- base_plot + geom_point(aes(y = log_demand_offset), alpha = 0.5, color = "blue") + labs(title = "RRP vs Demand and Temperature", y = "Logged Values")
combined_plot <- demand_plot + geom_point(aes(y = log(min_temperature)), alpha = 0.5, color = "red")
print(combined_plot)
# ACF of Electricity Demand
price_ts <- ts(Elec_data$log_RRP_offset, frequency = 365)
acf(price_ts, main = "ACF of Electricity Demand", lag = 28)
# Create a base plot with the date on the x-axis
base_plot <- ggplot(Elec_data, aes(x = date)) + theme_minimal()
# Add the first layer for log_demand_offset
demand_plot <- base_plot +
geom_point(aes(y = log_demand_offset), alpha = 0.5, color = "blue") +
labs(title = "RRP vs Demand and Temperature", y = "Logged Values")
# Add the second layer for log(min_temperature)
combined_plot <- demand_plot +
geom_point(aes(y = log(min_temperature)), alpha = 0.5, color = "red")
# Display the combined plot
print(combined_plot)
# Plotting RRP vs Demand
ggplot(Elec_data, aes(x = log_demand_offset, y = log_RRP_offset)) +
geom_point(alpha = 0.5) +
labs(title = "RRP vs Demand", x = "Demand", y = "RRP") +
theme_minimal()
# Base plot
ggplot(Elec_data, aes(x = abs(log(max_temperature) - breakpoint), y = log_demand_offset)) +
geom_point() +
labs(title = "Demand vs. Max Temperature", x = "Max Temperature", y = "Demand")
# Adding vertical lines for potential breakpoints
p + geom_vline(xintercept = 3.041, color = "red", linetype = "dashed")
# Adding vertical lines for potential breakpoints
p + geom_vline(xintercept = 3.041, color = "red", linetype = "dashed")
# Base plot with the absolute difference from breakpoint
p <- ggplot(Elec_data, aes(x = abs(log(max_temperature) - breakpoint), y = log_demand_offset)) +
geom_point() +
labs(title = "Demand vs. Max Temperature", x = "Max Temperature", y = "Demand")
# Adding vertical lines for potential breakpoints
p + geom_vline(xintercept = breakpoint, color = "red", linetype = "dashed")
# Breakpoint is around 3.035
breakpoint <- 3.041
# Base plot
ggplot(Elec_data, aes(x = abs(log(max_temperature) - breakpoint), y = log_demand_offset)) +
geom_point() +
labs(title = "Demand vs. Max Temperature", x = "Max Temperature", y = "Demand")
# Adding vertical lines for potential breakpoints
geom_vline(xintercept = breakpoint, color = "red", linetype = "dashed")
# Create an indicator variable
Elec_data$segment <- ifelse(log(Elec_data$max_temperature) <= breakpoint, "below_break", "above_break")
# Fit separate linear models for each segment
lm_below <- lm(log_demand_offset ~ log(max_temperature), data = Elec_data, subset = (segment == "below_break"))
lm_above <- lm(log_demand_offset ~ log(max_temperature), data = Elec_data, subset = (segment == "above_break"))
# Summary of the models
summary(lm_below)
summary(lm_above)
ggplot(Elec_data, aes(x = log(max_temperature), y = log_demand_offset)) +
geom_point() +
geom_abline(intercept = coef(lm_below)["(Intercept)"],
slope = coef(lm_below)["log(max_temperature)"],
linetype = "dashed", color = "blue") +
geom_abline(intercept = coef(lm_above)["(Intercept)"],
slope = coef(lm_above)["log(max_temperature)"],
linetype = "dashed", color = "red") +
labs(title = "Demand vs. Max Temperature (Piecewise Linear)",
x = "Log(Max Temperature)",
y = "Log(Demand)") +
theme_minimal()
# Assuming 'holiday' is a variable with 'Y' and 'N' values in your Elec_data dataframe
ggplot(Elec_data, aes(x = log_demand_offset, y = log_RRP_offset, color = holiday)) +
geom_point(alpha = 0.5) +
labs(title = "Demand vs. Price (Separated by school_day)",
x = "Price (RRP)",
y = "Demand",
color = "holiday") +
theme_minimal() +
scale_color_manual(values = c("Y" = "red", "N" = "blue"))
